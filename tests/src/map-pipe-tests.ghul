namespace Tests is

    use Collections;
    use NSubstitute;

    use NSubstitute.SubstituteExtensions.returns;
    use NSubstitute.SubstituteExtensions.received;

    use Microsoft.VisualStudio.TestTools.UnitTesting;

    use Ghul.Pipes;

    class MapPipeShould is
        @test()

        _is_log_cleared: bool static;

        init() is
            if !_is_log_cleared then
                IO.File.create("/tmp/ghul-pipes.txt").close();
                _is_log_cleared = true;
            fi

            debug("AdaptorPipeShould.init()");
        si

        Map_EmptyArray_ReturnsEmptySequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from(empty`[int]());

            let result = 
                pipe
                    .map(i => i.to_string());

            assert_are_equal(empty`[string](), result);
        si

        Map_IntsToStrings_ReturnsExpectedSequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([3, 4, 1, 5, 2, 3, 1, 4, 5]);

            let result = 
                pipe
                    .map(i => i.to_string());

            assert_are_equal(["3", "4", "1", "5", "2", "3", "1", "4", "5"], result);
        si

        Map_CalledTwice_AppliesBothFunctionsToEveryElementInCorrectOrder() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([1, 2, 3, 4, 5, 6]);

            let result = 
                pipe
                    .map(i => "" + i + "-first")
                    .map(i => i + "-second");

            assert_are_equal(["1-first-second", "2-first-second", "3-first-second", "4-first-second", "5-first-second", "6-first-second"], result);
        si

        /* these are example tests in ghul
        Index_EmptyArray_ReturnsEmptySequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from(empty`[int]());

            let result = 
                pipe
                    .index();

            assert_are_equal(empty`[INDEXED_VALUE[int]](), result);
        si

        Index_MultipleElements_ReturnsExpectedSequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[string]
                    .from(["3", "4", "1", "5", "2", "3", "1", "4", "5"]);

            let result = 
                pipe
                    .index();

            assert_are_equal([ivs(0, "3"), ivs(1, "4"), ivs(2, "1"), ivs(3, "5"), ivs(4, "2"), ivs(5, "3"), ivs(6, "1"), ivs(7, "4"), ivs(8, "5")], result);
        si

        Index_MultipleElementsPositiveInitialIndex_ReturnsExpectedSequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[string]
                    .from(["3", "4", "1", "5", "2", "3", "1", "4", "5"]);

            let result = 
                pipe
                    .index(3);

            assert_are_equal([ivs(3, "3"), ivs(4, "4"), ivs(5, "1"), ivs(6, "5"), ivs(7, "2"), ivs(8, "3"), ivs(9, "1"), ivs(10, "4"), ivs(11, "5")], result);
        si

        Index_MultipleElementsNegativeInitialIndex_ReturnsExpectedSequence() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[string]
                    .from(["3", "4", "1", "5", "2", "3", "1", "4", "5"]);

            let result = 
                pipe
                    .index(-3);

            assert_are_equal([ivs(-3, "3"), ivs(-2, "4"), ivs(-1, "1"), ivs(0, "5"), ivs(1, "2"), ivs(2, "3"), ivs(3, "1"), ivs(4, "4"), ivs(5, "5")], result);
        si

        IndexedValue_ToString_ReturnsIndexAndValueInParentheses() is
            @test()

            let indexedValue = ivs(1234, "ABCD");

            Assert.are_equal("(1234,ABCD)", indexedValue.to_string());
        si        
    si
    */

    si
si


/*

These C# tests need to be translated into ghul


*/